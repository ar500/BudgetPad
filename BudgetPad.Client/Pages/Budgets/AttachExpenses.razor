@using BudgetPad.Shared.Dtos
@inject HttpClient Http
@inject IModalService Modal

@if (allBills == null)
{
    <p>Loading...</p>
}
else
{
    <DxDataGrid Data=@allBills
                PageSize=5>
        <DxDataGridCommandColumn Width="150px"></DxDataGridCommandColumn>
        <DxDataGridColumn Field=@nameof(BillDto.ShortName) Caption="Name"></DxDataGridColumn>
        <DxDataGridColumn Field=@nameof(BillDto.Description) Caption="Description"></DxDataGridColumn>
        <DxDataGridDateEditColumn Field=@nameof(BillDto.DueDate) Caption="DueDate"></DxDataGridDateEditColumn>
        <DxDataGridColumn Field=@nameof(BudgetDto.Bills) Caption="Attach" Width="20px">
            <DisplayTemplate>
                @{
                    <input type="checkbox" checked=@IsAttached((context as BillDto)) onchange=@(eventArgs => { CheckboxClicked((context as BillDto).Id, eventArgs.Value); })/>
                }
            </DisplayTemplate>
        </DxDataGridColumn>
    </DxDataGrid>
    <button type="button" class="btn btn-primary" onclick=@UpdateBills>Attach</button>
    <button type="button" class="btn btn-secondary" onclick=@Cancel>Cancel</button>
}

@functions {
    [CascadingParameter]
    private ModalParameters ModalParameters { get; set; }

    private BudgetDto budget;

    private List<BillDto> allBills;

    private List<Guid> billsToAttach = new List<Guid>();

    protected override async Task OnInitAsync()
    {
        budget = ModalParameters.Get<BudgetDto>("budget");
        billsToAttach.AddRange(budget.Bills.Select(b => b.Id).ToList());

        allBills = await Http.GetJsonAsync<List<BillDto>>("api/Bills?includeCategories=true");
    }

    private bool IsAttached(BillDto bill)
    {
        return budget.Bills.Any(b => b.Id == bill.Id);
    }

    private void CheckboxClicked(Guid billId, object checkedValue)
    {
        if ((bool)checkedValue)
        {
            if (!billsToAttach.Contains(billId))
            {
                billsToAttach.Add(billId);
            }
        }
        else
        {
            if (billsToAttach.Contains(billId))
            {
                billsToAttach.Remove(billId);
            }
        }
    }

    private async Task UpdateBills()
    {
        await Http.SendJsonAsync(HttpMethod.Post, "api/Budgets/UpdateBills/" + budget.Id, billsToAttach);
        Modal.Close(ModalResult.Ok($"{budget.ShortName}'s bills were updated successfully."));
    }

    private void Cancel()
    {
        Modal.Close(ModalResult.Cancel());
    }
}