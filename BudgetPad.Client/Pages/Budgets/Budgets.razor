@page "/budgets"
@using BudgetPad.Shared.Dtos
@inject HttpClient Http
@inject IModalService Modal

<h1>Budgets</h1>

@if (budgets == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <button class="btn btn-primary btn-sm" type="button" onclick="@(() => AddBudget())"><i class="oi oi-plus"></i>Add Budget</button>
    <div class="card-columns mt-3">
    @foreach (var budget in budgets)
    {
        <div class="card">
            <div class="card-body">
               <BudgetSummary budget="@budget" />
            </div>
            <div class="card-footer text-center">
                <button class="btn btn-sm btn-light" onclick="@(() => EditBudget(budget.Id))"><i class="oi oi-pencil" /></button>
                <button class="btn btn-sm btn-light" onclick="@(() => DeleteBudget(budget.Id, budget.ShortName))"><i class="oi oi-delete" /></button>
                <button class="btn btn-sm btn-light" onclick="@(() => ShowAttachExpenses(budget))"><i class="oi oi-list-rich"></i></button>
            </div>
        </div>
    }
    </div>
}

@functions
{
    BudgetDto[] budgets;

    protected override async Task OnInitAsync()
    {
        budgets = await Http.GetJsonAsync<BudgetDto[]>("api/budgets?includeBills=true");
    }

    private void AddBudget()
    {
        Modal.Show("New budget", typeof(AddBudget));
        Modal.OnClose += RefreshBudgets;
    }

    private void EditBudget(Guid id)
    {
        var parameters = new ModalParameters();
        parameters.Add("budgetId", id);

        Modal.Show("Edit Budget", typeof(EditBudget), parameters);
        Modal.OnClose += RefreshBudgets;
    }

    private void DeleteBudget(Guid id, string shortName)
    {
        //var parameters = new ModalParameters();
        //parameters.Add("budgetId", id);
        //parameters.Add("shortName", shortName);

        //Modal.Show("Delete budget", typeof(Deletebudget), parameters);
        //Modal.OnClose += Refreshbudgets;
    }

    private void ShowAttachExpenses(BudgetDto budget)
    {
        var parameters = new ModalParameters();
        parameters.Add("budget", budget);
        Modal.Show("Attach Expenses", typeof(AttachExpenses), parameters);
        Modal.OnClose += RefreshBudgets;
    }

    private async void RefreshBudgets(ModalResult a)
    {
        budgets = await Http.GetJsonAsync<BudgetDto[]>("api/budgets?includeBills=true");
        this.StateHasChanged();
        Modal.OnClose -= RefreshBudgets;
    }
}
