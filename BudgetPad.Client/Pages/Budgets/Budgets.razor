@page "/budgets"
@using BudgetPad.Shared.Dtos
@inject HttpClient Http
@inject IModalService Modal

<h1>Budgets</h1>

@if (budgets == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <button class="btn btn-primary btn-sm" type="button" onclick="@(() => AddBudget())"><i class="oi oi-plus"></i>Add Budget</button>
    <div class="card-columns mt-3">
        @foreach (var budget in budgets)
        {
            <div class="card">
                <div class="card-body">
                    <div class="row">
                        <div class="col">
                            <h3 class="card-title text-md-left">@budget.ShortName</h3>
                            @if (IsCurrentBudget(budget))
                            {
                                <h6 class="card-subtitle text-left text-info">Current Budget</h6>
                            }
                        </div>
                    </div>
                    <div class="row mt-3">
                        <div class="col text-md-left">
                            <p class="card-text">@budget.Description</p>
                        </div>
                    </div>
                    <div class="row mt-3">
                        <div class="col-sm">
                            <span class="card-text text-muted text-sm-left">Start Date</span>
                        </div>
                        <div class="col">
                            <span class="card-text text-dark">
                                @budget.CycleStartDate.ToShortDateString()
                            </span>
                        </div>
                    </div>
                    <div class="row mt-3">
                        <div class="col-sm">
                            <span class="card-text text-muted text-sm-left">End Date</span>
                        </div>
                        <div class="col">
                            <span class="card-text text-dark">
                                @budget.CycleEndDate.ToShortDateString()
                            </span>
                        </div>
                    </div>
                    <div class="row mt-3">
                        <div class="col-sm">
                            <span class="card-text text-muted text-sm-left">Funds Allotted:</span>
                        </div>
                        <div class="col">
                            <span class="card-text text-dark">$@budget.AllottedFunds</span>
                        </div>
                    </div>
                    <div class="row mt-3">
                        <div class="col-sm">
                            <span class="card-text text-muted text-sm-left">Attached Expenses</span>
                        </div>
                        <div class="col">
                            <span class="card-text text-dark">@budget.Bills.Count</span>
                        </div>
                    </div>
                </div>
                <div class="card-footer text-center">
                    <button class="btn btn-sm btn-light" onclick="@(() => EditBudget(budget.Id))"><i class="oi oi-pencil" /></button>
                    <button class="btn btn-sm btn-light" onclick="@(() => DeleteBudget(budget.Id, budget.ShortName))"><i class="oi oi-delete" /></button>
                </div>
            </div>
        }
    </div>
}

@functions{
    BudgetDto[] budgets;

    protected override async Task OnInitAsync()
    {
        budgets = await Http.GetJsonAsync<BudgetDto[]>("api/budgets?includeBills=true");
    }

    private void AddBudget()
    {
        Modal.Show("New budget", typeof(AddBudget));
        Modal.OnClose += RefreshBudgets;
    }

    private void EditBudget(Guid id)
    {
        //var parameters = new ModalParameters();
        //parameters.Add("budgetId", id);

        //Modal.Show("Edit budget", typeof(Editbudget), parameters);
        //Modal.OnClose += Refreshbudgets;
    }

    private void DeleteBudget(Guid id, string shortName)
    {
        //var parameters = new ModalParameters();
        //parameters.Add("budgetId", id);
        //parameters.Add("shortName", shortName);

        //Modal.Show("Delete budget", typeof(Deletebudget), parameters);
        //Modal.OnClose += Refreshbudgets;
    }

    private async void RefreshBudgets(ModalResult a)
    {
        budgets = await Http.GetJsonAsync<BudgetDto[]>("api/budgets?includeBills=true");
        this.StateHasChanged();
        Modal.OnClose -= RefreshBudgets;
    }

    private bool IsCurrentBudget(BudgetDto budget)
    {
        var today = DateTime.Now;
        return budget.CycleStartDate <= today && budget.CycleEndDate >= today;
    }
}